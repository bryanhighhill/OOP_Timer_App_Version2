REM /**
REM  * This app is a countdown timer created for the BASIS DWC, using BBj and CSS & utilizing the OOP programming model
REM  *It accepts user input for hours, minutes, and seconds. Upon pressing start, the UI will display a countdown from the
REM  * user inputted vallues to 00:00:00, by the second.
REM  * The user is then asked if they'd like to repeat timer or not. If repeat is confirmed the timer will start over with
REM  * the original time input. If denied, the user is brought back to the beginning page of the app
REM  */




declare auto TimerApp app!
app! = new TimerApp()
app!.run()
end

class public TimerApp
    field protected BBjSysGui           sysgui!
    field protected BBjWebManager       webManager!
    
    REM 'Windows'
    field protected BBjTopLevelWindow   winMain!
    field protected BBjChildWindow      winInput!
    field protected BBjChildWindow      winBtn!
    field protected BBjChildWindow      winClock!
    field protected BBjChildWindow      winTimerColorIndicator!
    field protected BBjChildWindow      winClockRight!
    field protected BBjChildWindow      winClockLeft!
    field protected BBjChildWindow      winClockFace!
    field protected BBjChildWindow      winTimeIndicator!

    REM 'Time variables'
    field protected BBjNumber           hours!
    field protected BBjNumber           minutes!
    field protected BBjNumber           seconds!
    field protected BBjNumber           initialHours!
    field protected BBjNumber           initialMinutes!
    field protected BBjNumber           initialSeconds!
    field protected BBjNumber           totalTimeInSec!
    field protected BBjNumber           halfTime!
    field protected BBjString           totalTimeString!
    field protected BBjString           halfTimeString! 
    
    REM 'Buttons & Inputs'
    field protected BBjInputNSpinner    hoursInput!
    field protected BBjInputNSpinner    minutesInput!
    field protected BBjInputNSpinner    secondsInput!
    field protected BBjButton           startBtn!
    field protected BBjButton           pauseBtn!
    field protected BBjButton           resumeBtn!
    field protected BBjButton           cancelBtn!
    
    REM 'OTHER'
    field protected BBjNumber           noInputMessage
    field protected BBjNumber           endOfTimerMessage
    field protected BBjString           timeRemainingString!
    field protected BBjControl          timeDisplay!
    field protected BBjNumber           initialCountDown! = 1
  
    
    REM ==============================='RUN TIMER APP'
    method public void run()
        #webManager! = BBjAPI().getWebManager()
        css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(dsk("")+dir("")+"stylesheet.css"))
        #webManager!.injectStyle(css!, 0, "name=stylesheet_css")
    
        REM 'Refresh page when app ends'
        refresh! = #webManager!.urlAction(#webManager!.getUrl())
        #webManager!.setEndAction(refresh!)
        
        rem 'Create UI'
        #sysgui! = BBjAPI().openSysGui("X0")
        #createAppUI()
        
        process_events  
    methodend
    
    
    REM ==============================='CREATE APP UI'
    method public void createAppUI()
        REM 'MAIN WINDOW'
        title$ = "OOP Countdown Timer"
        #winMain! = #sysgui!.addWindow(title$, $01111000$)
        #winMain!.addClass("winMain")
        
        REM 'CHILD WINDOWS'
        #winInput! = #winMain!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winInput!.addClass("winInput")
        
        #winBtn! = #winMain!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winBtn!.addClass("winBtn")
        
        REM 'CHILD WINDOWS FOR TIMER DISPLAY - INITIAL VISIBILITY = 0'
        #winClock! = #winMain!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winClock!.addClass("clock-container")
        #winClock!.setVisible(0)
  
        #winTimerColorIndicator! = #winClock!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winTimerColorIndicator!.addClass("timer-color-indicator")
        #winTimerColorIndicator!.setVisible(0)
       
        #winClockRight! = #winTimerColorIndicator!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winClockRight!.addClass("clock-right")
        #winClockRight!.addClass("clock-rotate-end")
        #winClockRight!.setVisible(0)
        
        #winClockLeft! = #winTimerColorIndicator!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winClockLeft!.setBorderColor(#sysgui!.makeColor(250, 250, 250, 0))
        #winClockLeft!.addClass("clock-left")
        #winClockLeft!.addClass("clock-rotate-start")
        #winClockLeft!.setVisible(0)
        
        #winClockFace! = #winTimerColorIndicator!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winClockFace!.addClass("clock-face")  
        #winClockFace!.setVisible(0)   
           
        #winTimeIndicator! = #winClockFace!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winTimeIndicator!.addClass("time-indicator-window")
        #winTimeIndicator!.setVisible(0)
        
        REM 'INPUTS'
        #hoursInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 23)
        #hoursInput!.addClass("input-spinner")
        #hoursInput!.setAttribute("label", "Hours")
        
        #minutesInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 59)
        #minutesInput!.addClass("input-spinner")
        #minutesInput!.setAttribute("label", "Minutes")
        
        #secondsInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 59)
        #secondsInput!.addClass("input-spinner")
        #secondsInput!.setAttribute("label", "Seconds") 
        
        REM 'BUTTONS'
        #startBtn! = #winBtn!.addButton("Start")
        #startBtn!.setNoEdge(1)
        #startBtn!.addClass("start-button")
        
        #resumeBtn! = #winBtn!.addButton("Resume")
        #resumeBtn!.setNoEdge(1)
        #resumeBtn!.addClass("resume-button")
        #resumeBtn!.setVisible(0)
        
        #pauseBtn! = #winBtn!.addButton("Pause")
        #pauseBtn!.setNoEdge(1)
        #pauseBtn!.addClass("pause-button")
        #pauseBtn!.setVisible(0)
        
        #cancelBtn! = #winBtn!.addButton("Cancel")
        #cancelBtn!.setNoEdge(1)
        #cancelBtn!.addClass("cancel-button")
        #cancelBtn!.setVisible(0)

        REM 'CALLBACKS'
        #winMain!.setCallback(#winMain!.ON_CLOSE,"eoj")
        #startBtn!.setCallback(#startBtn!.ON_BUTTON_PUSH, #this!, "onStart")
        #resumeBtn!.setCallback(#resumeBtn!.ON_BUTTON_PUSH, #this!, "onResume")
        #pauseBtn!.setCallback(#pauseBtn!.ON_BUTTON_PUSH, #this!, "onPause")
        #cancelBtn!.setCallback(#cancelBtn!.ON_BUTTON_PUSH, #this!, "onCancel")
    methodend
    
    
    REM ==============================='VALIDATE INPUTS AND SET INITIAL VARIABLES'
    method public void onStart(BBjButtonPushEvent e!)
        #hours! = #hoursInput!.getValue()
        #minutes! = #minutesInput!.getValue()
        #seconds! = #secondsInput!.getValue()

        REM 'Check to see if user inputted any time. In no, issue error. If yes, start timer'
        if (#hours! = 0) AND (#minutes! = 0) AND (#seconds! = 0) then
            #noInputMessage = msgbox("No Time Selected", 0 + 48, "Start Timer Error")
        else
            REM 'Initial time saved for repeat timer function at end of countdown'
            #initialHours! = #hours!
            #initialMinutes! = #minutes!
            #initialSeconds! = #seconds!
            
            #onValidation()
        endif
    methodend
        
        
    REM ==============================='DISPLAY TIMER UI'
    method public void onValidation()
        REM 'handle button visibility'
        #startBtn!.setVisible(0)
        #pauseBtn!.setVisible(1)
        #cancelBtn!.setVisible(1)
        #winInput!.setVisible(0)
        
        REM 'handle window visibility'
        #winClock!.setVisible(1)
        #winTimerColorIndicator!.setVisible(1)
        #winClockRight!.setVisible(1)
        #winClockLeft!.setVisible(1)
        #winClockFace!.setVisible(1)
        #winTimeIndicator!.setVisible(1)

        #handleCSS()
    methodend
    
    
    REM ==============================='CREATE CSS VARIABLES AND INJECT STYLE TO CREATE ANIMATIONS'
    method public void handleCSS()
        BBjAPI().getWebManager().executeScript("console.log('in handleCss() with h/m/s = " + str(#hours!) + "/" + str(#minutes!) + "/" + str(#seconds!) + "');")
        
        REM 'Time variables used for clock css animations'
        #totalTimeInSec! = (#hours! *  3600) + (#minutes! * 60) + (#seconds!)
        #halfTime! = #totalTimeInSec! / 2
        #totalTimeString! = STR(#totalTimeInSec!)
        #halfTimeString! = STR(#halfTime!) 
    
        #webManager! = BBjAPI().getWebManager()
        #webManager!.injectStyle(".clock-rotate-end { "+
:           "animation-delay: " + #halfTimeString! + "s !important;"+
:           "animation-duration: " + #halfTimeString! + "s !important;"+
:       "}")

        #webManager!.injectStyle(".clock-rotate-start { "+
:           "animation-delay: 0s, " + #halfTimeString! + "s !important;"+
:           "animation-duration: " + #halfTimeString! + "s, 0s !important;"+
:       "}")

        rem 'Create one second timer'
        BBjAPI().createTimer("oneSecondTimer", 1, #this!, "calculateTime")
        
        #calculateTime(null())
    methodend
    
    
    REM ==============================='DISPLAY TIME OVER BACKGROUND UI'
    method public void displayTime()             
        REM 'Check if this is first time showing display or not. If it is, set initial countdown to false. If it's not, remove previous display.'
        if (#initialCountDown! = 0) then 
            #timeDisplay!.destroy()
        else
            #initialCountDown! = 0
        endif
        
        REM 'Format time as string'
        if (#hours! > 0) then #timeRemainingString! = STR(#hours!: "00") + " : " + STR(#minutes!: "00") + " : " + STR(#seconds!: "00")
        if (#hours! = 0) AND (#minutes! > 0) then #timeRemainingString! = STR(#minutes!: "00") + " : " + STR(#seconds!: "00")
        if (#hours! = 0) AND (#minutes! = 0) AND (#seconds! >= 0) then #timeRemainingString! = " : " + STR(#seconds!: "00")       
 
        REM 'Add formatted time to dom'
        #timeDisplay! = #winTimeIndicator!.addStaticText(#timeRemainingString!)
        #timeDisplay!.addClass("time-indicator")
        
        REM 'When time is up'
        if (#hours! = 0) AND (#minutes! = 0) AND (#seconds! = 0) then #onComplete()
    methodend 
    
    
    REM ==============================='COUNTDOWN MATH' 
    method public void calculateTime(BBjTimerEvent timerEvent!)   
        BBjAPI().getWebManager().executeScript("console.log('in calculateTime() with h/m/s = " + str(#hours!) + "/" + str(#minutes!) + "/" + str(#seconds!) + "');")

        if (#seconds! > -2) AND (#initialCountDown! = 0) then #seconds! = #seconds! - 1
        
        if (#hours! > 0) AND (#minutes! = 0) AND (#seconds! = -1) AND (#initialCountDown! = 0) then
            #hours! = #hours! - 1
            #minutes! = 59
            #seconds! = 59
        endif
        
        if (#seconds! = -1) AND (#minutes! > 0) AND (#initialCountDown! = 0) then 
            #minutes! = #minutes! - 1
            #seconds! = 59
        endif
        
        #displayTime()       
    methodend
  
       
    REM ==============================='PAUSE TIMER'
    method public void onPause(BBjButtonPushEvent e!)
        rem 'Remove timer'
        BBjAPI().removeTimer("oneSecondTimer")
        
        rem 'Pause css animations'
        pauseAnimationStart! = ".clock-rotate-start { animation-play-state: paused !important; }"
        pauseAnimationEnd! = ".clock-rotate-end { animation-play-state: paused !important; }"
        #webManager!.injectStyle(pauseAnimationStart!)
        #webManager!.injectStyle(pauseAnimationEnd!)
        
        rem 'Hide pause button, show resume button'
        #pauseBtn!.setVisible(0)
        #resumeBtn!.setVisible(1)
    methodend


    REM ==============================='RESUME TIMER METHOD'
    method public void onResume(BBjButtonPushEvent e!)
        rem 'Add one second timer'
        BBjAPI().createTimer("oneSecondTimer", 1, #this!, "calculateTime")
        
        rem 'Resume css animations'
        resumeAnimationStart! = ".clock-rotate-start { animation-play-state: running !important; }"
        resumeAnimationEnd! = ".clock-rotate-end { animation-play-state: running !important; }"
        #webManager!.injectStyle(resumeAnimationStart!)
        #webManager!.injectStyle(resumeAnimationEnd!)
        
        rem 'Hide resume button, show pause button'
        #pauseBtn!.setVisible(1)
        #resumeBtn!.setVisible(0)
    methodend
    
    
    REM ==============================='CANCEL TIMER'
    method public void onCancel(BBjButtonPushEvent e!)
        #eoj()
    methodend
    
    
    REM ==============================='TIMER COMPLETE'
    method public void onComplete()
        rem 'Remove timer'
        BBjAPI().removeTimer("oneSecondTimer")
        #endOfTimerMessage = msgbox("Repeat Timer?", 4 + 32 + 0 + 0, "Time's Up!")
        
        rem 'Yes, repeat'
        if (#endOfTimerMessage = 6) then
            #hoursInput!.setValue(#initialHours!)
            #minutesInput!.setValue(#initialMinutes!)
            #secondsInput!.setValue(#initialSeconds!)
            
            REM 'handle window visibility'
            #winClock!.setVisible(0)
            #winTimerColorIndicator!.setVisible(0)
            #winClockRight!.setVisible(0)
            #winClockLeft!.setVisible(0)
            #winClockFace!.setVisible(0)
            #winTimeIndicator!.setVisible(0)
            
            #initialCountDown! = 1
            #timeDisplay!.setVisible(0)
            #onStart(null())
        endif
        
        rem 'No, don't repeat'
        if (#endOfTimerMessage = 7) then
            #eoj()
        endif
    methodend


    REM ==============================='WINDOW CLOSE METHOD'
    method public void eoj()
        release
    methodend
classend 